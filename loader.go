package main

import (
	"strings"
)

type Attributes map[string]string

type Element interface {
	GetTag() string
	GetAttributes() Attributes
}

type BaseElement struct {
	Tag string
	Attributes Attributes
}

type InlineElement struct {
	BaseElement
}

func (i *InlineElement) TagStr() string {
	return TagBodyStr(i.Tag, i.Attributes) + "/>\n"
}

func NewInlineElement(tag string, attrs Attributes) InlineElement {
	return InlineElement{
		BaseElement: BaseElement{Tag: tag, Attributes: attrs},
	}
}

type NestedElement struct {
	BaseElement
	Children []Element
}

func NewNestedElement(tag string, attrs Attributes, children []Element) NestedElement {
	return NestedElement{
		BaseElement: BaseElement{Tag: tag, Attributes: attrs},
		Children: children,
	}
}

func (n *NestedElement) StartTagStr() string {
	return TagBodyStr(n.Tag, n.Attributes) + ">\n"
}

func (n *NestedElement) EndTagStr() string {
	return "</" + n.Tag + ">\n"
}

func TagBodyStr(tag string, attrs Attributes) string {
	str := "<" + tag
	if len := len(attrs); len != 0 {
		str += " "
		i := 0
		for k, v := range attrs {
			if i == len - 1 {
				str += k + "=" + "\"" + v + "\""
			} else {
				str += k + "=" + "\"" + v + "\"" + " "
			}
			i++
		}
	}
	return str
}

func Indent(depth int) string {
	return strings.Repeat("  ", depth)
}

func (b BaseElement) GetTag() string {
	return b.Tag
}

func (b BaseElement) GetAttributes() Attributes {
	return b.Attributes
}

type ModelWriter struct {
	Model ModelData
	Root NestedElement
}

func (n *NestedElement) AppendInline(tag string, attrs Attributes) {
	n.Children = append(n.Children, NewInlineElement(tag, attrs))
}

func (n *NestedElement) AppendNested(tag string, attrs Attributes, children []Element) {
	n.Children = append(n.Children, NewNestedElement(tag, attrs, children))
}

func GetDocumentName(model ModelData) string {
	return model.DocumentInfo.GetName()
}

func NewModelWriter(model ModelData) *ModelWriter {
	return &ModelWriter {
		Model: model,
		Root: NewNestedElement("mujoco", Attributes{"model": GetDocumentName(model)}, nil),
	}
}

func TraverseElements(root NestedElement, depth int) string {
	str := Indent(depth) + root.StartTagStr()
	if depth <= 1 {
		str = "\n" + str
	}
	for _, e := range root.Children {
		inline, ok := e.(InlineElement)
		if ok {
			str += Indent(depth + 1) + inline.TagStr()	
		} else {
			nested := e.(NestedElement)
			str += TraverseElements(nested, depth + 1)
		}
	}
	str += Indent(depth) + root.EndTagStr()

	return str
}

const HeaderCommentStub = "<!--\n  Generated by Onshape MCJF Exporter.\n\n  Do not modify.\n-->\n"

func (m *ModelWriter) ModelToString() string {
	return HeaderCommentStub + TraverseElements(m.Root, 0)
}
/*
<option timestep="0.005"/>

<visual>
  <map force="0.1" zfar="30"/>
  <rgba haze="0.15 0.25 0.35 1"/>
  <global offwidth="2560" offheight="1440" elevation="-20" azimuth="120"/>
</visual>

<asset>
  <texture type="skybox" builtin="gradient" rgb1=".3 .5 .7" rgb2="0 0 0" width="32" height="512"/>
  <texture name="body" type="cube" builtin="flat" mark="cross" width="128" height="128" rgb1="0.8 0.6 0.4" rgb2="0.8 0.6 0.4" markrgb="1 1 1" random="0.01"/>
  <material name="body" texture="body" texuniform="true" rgba="0.8 0.6 .4 1"/>
  <texture name="grid" type="2d" builtin="checker" width="512" height="512" rgb1=".1 .2 .3" rgb2=".2 .3 .4"/>
  <material name="grid" texture="grid" texrepeat="1 1" texuniform="true" reflectance=".2"/>
</asset>
*/

func (m *ModelWriter) ExportSTL() {
}

func (m *ModelWriter) MakeModel() {
	m.Root.AppendInline("option", Attributes{"timestep": "0.005"})
	m.Root.AppendNested("visual", Attributes{}, []Element {
		NewInlineElement("map", Attributes{"force": "0.1", "zfar": "30"}),
		NewInlineElement("rgba", Attributes{"haze": "0.15 0.25 0.35 1"}),
		NewInlineElement("global", Attributes{"offwidth": "2560", "offheight": "1440", "elevation": "-20", "azimuth": "120"}),
	})
	m.Root.AppendNested("asset", Attributes{}, []Element {
		NewInlineElement("texture", Attributes{"type": "skybox", "builtin": "gradient", "rgb1":".3 .5 .7", "rgb2":"0 0 0", "width":"32", "height":"512"}),
		NewInlineElement("texture", Attributes{"name":"body", "type":"cube", "builtin":"flat", "mark":"cross", "width":"128", "height":"128", "rgb1":"0.8 0.6 0.4", "rgb2":"0.8 0.6 0.4", "markrgb":"1 1 1", "random":"0.01"}),
		NewInlineElement("material", Attributes{"name":"body", "texture":"body", "texuniform":"true", "rgba":"0.8 0.6 .4 1"}),
		NewInlineElement("texture", Attributes{"name":"grid", "type":"2d", "builtin":"checker", "width":"512", "height":"512", "rgb1":".1 .2 .3", "rgb2":".2 .3 .4"}),
		NewInlineElement("material", Attributes{"name":"grid", "texture":"grid", "texrepeat":"1 1", "texuniform":"true", "reflectance":".2"}),
	})
}